import os

def create_test_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    test_content = """The quick brown fox jumps over the lazy dog.
Hello world! This is a test example.
Programming is fun. Python is awesome.
Statistics and analysis of letter usage.
Gadsby was written without the letter E."""

    with open('Test.txt', 'w', encoding='utf-8') as f:
        f.write(test_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª Test.txt")

def analyze_letters_simple(filename):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(filename):
        print(f"‚ùå –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        create = input("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª? (y/n): ")
        if create.lower() == 'y':
            create_test_file()
            filename = 'Test.txt'  # –¢–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        else:
            return False
    
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    counts = {}
    for ch in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
        counts[ch] = 0
    
    total_words = 0
    
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            print(f"üìñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {filename}")
            print("-" * 40)
            
            for line in file:
                words = line.split()
                for word in words:
                    clean_word = word.upper().rstrip('.,!?;:"()')
                    clean_word = ''.join(char for char in clean_word if char.isalpha())
                    
                    if clean_word:
                        total_words += 1
                        for letter in set(clean_word):
                            if letter in counts:
                                counts[letter] += 1
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–æ–≤: {total_words}")
    print()
    print("–ë—É–∫–≤–∞ : –°–ª–æ–≤   %")
    print("-" * 18)
    
    for letter in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
        percentage = (counts[letter] / total_words * 100) if total_words > 0 else 0
        print(f"{letter}     : {counts[letter]:4d}  {percentage:6.2f}%")
    
    min_count = min(counts.values())
    rarest = [letter for letter, count in counts.items() if count == min_count]
    
    print(f"\nüéØ –°–∞–º–∞—è —Ä–µ–¥–∫–∞—è –±—É–∫–≤–∞: {', '.join(rarest)} (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ {min_count} —Å–ª–æ–≤–∞—Ö)")
    return True

def main():
    print("=" * 50)
    print("–ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ë–£–ö–í –í –°–õ–û–í–ê–•")
    print("=" * 50)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:")
        print("1 - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª Test.txt")
        print("2 - –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
        print("3 - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É")
        print("4 - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2/3/4): ").strip()
        
        if choice == '1':
            analyze_letters_simple('Test.txt')
        
        elif choice == '2':
            filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ").strip()
            if filename:
                analyze_letters_simple(filename)
        
        elif choice == '3':
            print(f"üìÅ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {os.getcwd()}")
            print("–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:")
            for file in os.listdir('.'):
                if os.path.isfile(file):
                    print(f"  üìÑ {file}")
        
        elif choice == '4':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        if choice in ['1', '2']:
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()